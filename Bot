import discord
import random
import os
from discord.ext import commands, tasks
from  itertools import cycle

intents = discord.Intents(messages = True, guilds = True, reactions = True, members = True, presences = True)
client = commands.Bot(command_prefix = ',', intents = intents)


#Ciddi komutlar

@client.event
async def on_ready():

    await client.change_presence(status = discord.Status.online, activity = discord.Game(',help'))
    print("Bot is ready.")

@client.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send('An error occured. Please try again.')

@client.event
async def on_member_join(member):
    print(f"{member} has joined the server.")

@client.event
async def on_member_remove(member):
    print(f"{member} has left the server.")

@client.command()
@commands.has_permissions(manage_messages = True)
async def clear(ctx, amount=5):
    await ctx.channel.purge(limit=amount+1)

@client.command(description="Mutes a specified user.")
@commands.has_permissions(manage_messages = True)
async def mute(ctx,member: discord.Member, *, reason = None):
    guild = ctx.guild
    mutedRole= discord.utils.get(guild.roles, name = "Muted")

    if not mutedRole:
        mutedRole = await guild.create_role(name = "Muted")

    for channel in guild.channels:
        await channel.set_permissions(mutedRole, speak = False, send_messages = False)

        await member.add_roles(mutedRole, reason = reason)
        await ctx.send(f"{member.mention} has been muted.")

@client.command(description = "Unmutes a specified user")
@commands.has_permissions(manage_messages = True)
async def unmute(ctx,member: discord.Member):
    mutedRole= discord.utils.get(ctx.guild.roles, name = "Muted")
    
    await member.remove_roles(mutedRole)
    await ctx.send(f"{member.mention} has been unmuted.")

@client.command()
@commands.has_permissions(kick_members=True)
async def kick(ctx, member : discord.Member, *, reason = None):
    await member.kick(reason=reason)
    await ctx.send(f"**{member} was kicked**\n**Reason:** *{reason}*")

@client.command()
@commands.has_permissions(ban_members=True)
async def ban(ctx, member : discord.Member, *, reason = None):
    await member.ban(reason=reason)
    await ctx.send(f"**{member} was banned**\n**Reason:** {reason}")

@client.command()
@commands.has_permissions(administrator=True)
async def unban(ctx, *, member):
    banned_users = await ctx.guild.bans()
    member_name, member_discriminator = member.split("#")

    for ban_entry in banned_users:
        user = ban_entry.user

    if (user.name, user.discriminator) == (member_name, member_discriminator):
        await ctx.guild.unban(user)
        await ctx.send(f"**{user.mention} was unbanned.**")
        return
    
    #@commands.command(description = "Adds a role to a user.")
    #@commands.has_permissions(administrator = True)
    #async def addroles(ctx,role : discord.Role, member: discord.Member):
    #    await member.add_roles(role)
    #    await ctx.send(f"{role.mention} has been added to {member.mention}")

#@client.command()
#@commands.has_permissions(administrator = True)
#async def embed(ctx):
#    embed = discord.Embed(
#    title = input("Type a title: "),
#    description = input("Type a description: ")
#    )



#@client.command()
#@commands.has_permissions(kick_members=True)
#async def mute(ctx, member : discord.Member):
#    muted_role = ctx.guild.get_role(786691319137042483)
#    await member.add_roles(muted_role)
#    await ctx.send(f"{member} has been muted.")

#@client.command()
#@commands.has_permissions(kick_members=True)
#async def unmute(ctx, member : discord.Member):
#    muted_role = ctx.guild.get_role(786691319137042483)
#    await member.remove_roles(muted_role)
#    await ctx.send(f"{member} has been unmuted.")

@client.command()
async def load(ctx,extension):
    client.load_extension(f'cogs.{extension}')

@client.command()
async def unload(ctx,extension):
    client.unload_extension(f'cogs.{extension}')

for filename in os.listdir('./cogs'):
    if filename.endswith('.py'):
        client.load_extension(f'cogs.{filename[:-3]}')

#Eglence
@client.command()
async def ping(self,ctx):
    await ctx.send("Pong!")

@client.command(aliases=['8ball'])
async def _8ball(ctx, *, question):
    responses = ["It is certain.",
                "It is decidedly so.",
                "Without a doubt.",
                "Yes - definitely.",
                "You may rely on it.",
                "As I see it, yes.",
                "Most likely.",
                "Outlook good.",
                "Yes.",
                "Signs point to yes.",
                "Reply hazy, try again.",
                "Ask again later.",
                "Better not tell you now.",
                "Cannot predict now.",
                "Concentrate and ask again.",
                "Don't count on it.",
                "My reply is no.",
                "My sources say no.",
                "Outlook not so good.",
                "Very doubtful."]
    await ctx.send(f'Question: {question}\nAnswer: {random.choice(responses)}')


client.run('') #add bot token
